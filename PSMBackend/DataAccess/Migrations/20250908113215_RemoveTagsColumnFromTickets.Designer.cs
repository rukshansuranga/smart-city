// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSMDataAccess;

#nullable disable

namespace PSMDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250908113215_RemoveTagsColumnFromTickets")]
    partial class RemoveTagsColumnFromTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSMModel.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ComplainId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("AttachmentId");

                    b.HasIndex("ComplainId");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("IX_Attachment_EntityType");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TicketId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_Attachment_EntityType_EntityId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("PSMModel.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = "1",
                            AddressLine1 = "123 Main St",
                            AddressLine2 = "Apt 4B",
                            City = "Colombo",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            IsActive = true
                        },
                        new
                        {
                            ClientId = "2",
                            AddressLine1 = "456 Lake Rd",
                            City = "Kandy",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PSMModel.Models.Complain", b =>
                {
                    b.Property<int>("ComplainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComplainId"));

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ComplainType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("RatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RatedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("RatingReview")
                        .HasColumnType("text");

                    b.Property<string>("Sentiment")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ComplainId");

                    b.HasIndex("ClientId");

                    b.ToTable("Complains");

                    b.HasDiscriminator<string>("ComplainType").HasValue("Complain");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PSMModel.Models.ComplainTag", b =>
                {
                    b.Property<int>("ComplainId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.HasKey("ComplainId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ComplainTags");
                });

            modelBuilder.Entity("PSMModel.Models.Contractor", b =>
                {
                    b.Property<string>("ContractorId")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ContractorId");

                    b.ToTable("Contractors");

                    b.HasData(
                        new
                        {
                            ContractorId = "d0eca5fa-8cf4-4256-ab6a-9405c789c1b1",
                            AddressLine1 = "123 Main St",
                            City = "Colombo",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            IsActive = true,
                            Mobile = "0771234567",
                            Name = "Maga"
                        },
                        new
                        {
                            ContractorId = "a4aa5b28-36ab-4991-975a-5e5e441bf6fa",
                            AddressLine1 = "123 Main St",
                            City = "Gampaha",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            IsActive = true,
                            Mobile = "0779876543",
                            Name = "Access Construction"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GCShedule", b =>
                {
                    b.Property<int>("GCSheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GCSheduleId"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("RegionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("GCSheduleId");

                    b.HasIndex("RegionNo");

                    b.ToTable("GCShedules");

                    b.HasData(
                        new
                        {
                            GCSheduleId = 1,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Monday",
                            IsActive = true,
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Plastic"
                        },
                        new
                        {
                            GCSheduleId = 2,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Tuesday",
                            IsActive = true,
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 3,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Wednesday",
                            IsActive = true,
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 4,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Thursday",
                            IsActive = true,
                            RegionNo = "R001",
                            Time = "Afternoon",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 5,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Friday",
                            IsActive = true,
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Paper"
                        },
                        new
                        {
                            GCSheduleId = 6,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Monday",
                            IsActive = true,
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Plastic"
                        },
                        new
                        {
                            GCSheduleId = 7,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Tuesday",
                            IsActive = true,
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 8,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Wednesday",
                            IsActive = true,
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 9,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Thursday",
                            IsActive = true,
                            RegionNo = "R002",
                            Time = "Afternoon",
                            Type = "Garbage"
                        },
                        new
                        {
                            GCSheduleId = 10,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Day = "Friday",
                            IsActive = true,
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Paper"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.LightPost", b =>
                {
                    b.Property<string>("LightPostNumber")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("LightPostNumber");

                    b.ToTable("LightPosts");

                    b.HasData(
                        new
                        {
                            LightPostNumber = "LP001",
                            Latitude = 7.0259340000000003,
                            Longitude = 80.026858000000004
                        },
                        new
                        {
                            LightPostNumber = "LP002",
                            Latitude = 7.027679,
                            Longitude = 80.027620999999996
                        },
                        new
                        {
                            LightPostNumber = "LP003",
                            Latitude = 7.0308330000000003,
                            Longitude = 80.028531999999998
                        },
                        new
                        {
                            LightPostNumber = "LP004",
                            Latitude = 7.0330199999999996,
                            Longitude = 80.027282
                        },
                        new
                        {
                            LightPostNumber = "LP005",
                            Latitude = 7.0348280000000001,
                            Longitude = 80.025925999999998
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<int?>("ComplainId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComplainId");

                    b.HasIndex("TicketId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PSMModel.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwardedTenderId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<LocalDate?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("LocationNote")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProgressFrequency")
                        .HasColumnType("integer");

                    b.Property<string>("SpecificationDocument")
                        .HasColumnType("text");

                    b.Property<LocalDate?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDate?>("TenderClosingDate")
                        .HasColumnType("date");

                    b.Property<LocalDate?>("TenderOpeningDate")
                        .HasColumnType("date");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwardedTenderId = 1,
                            City = "Weliveriya",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            Description = "Description for Project Alpha",
                            EndDate = new NodaTime.LocalDate(2023, 12, 31),
                            EstimatedCost = 1000000m,
                            IsActive = true,
                            Latitude = 34.052199999999999,
                            Location = "Location A",
                            LocationNote = "Note for Location A",
                            Longitude = -118.2437,
                            SpecificationDocument = "specification_alpha.pdf",
                            StartDate = new NodaTime.LocalDate(2023, 1, 1),
                            Status = 0,
                            Subject = "Project Alpha",
                            TenderClosingDate = new NodaTime.LocalDate(2023, 1, 30),
                            TenderOpeningDate = new NodaTime.LocalDate(2023, 1, 15),
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            AwardedTenderId = 2,
                            City = "Ambaraluwa",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            Description = "Weliveriya road project",
                            EndDate = new NodaTime.LocalDate(2023, 12, 31),
                            EstimatedCost = 1000000m,
                            IsActive = true,
                            Latitude = 34.052199999999999,
                            Location = "Location A",
                            LocationNote = "Note for Location A",
                            Longitude = -118.2437,
                            SpecificationDocument = "specification_alpha.pdf",
                            StartDate = new NodaTime.LocalDate(2023, 1, 1),
                            Status = 0,
                            Subject = "Weliveriya road project",
                            TenderClosingDate = new NodaTime.LocalDate(2023, 1, 30),
                            TenderOpeningDate = new NodaTime.LocalDate(2023, 1, 15),
                            Type = 0
                        });
                });

            modelBuilder.Entity("PSMModel.Models.ProjectCoordinator", b =>
                {
                    b.Property<int>("ProjectCoordinatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectCoordinatorId"));

                    b.Property<LocalDate>("AssignDate")
                        .HasColumnType("date");

                    b.Property<string>("CoordinatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CoordinatorType")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ProjectCoordinatorId");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCoordinators");

                    b.HasData(
                        new
                        {
                            ProjectCoordinatorId = 1,
                            AssignDate = new NodaTime.LocalDate(2025, 8, 24),
                            CoordinatorId = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            CoordinatorType = 0,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            IsActive = true,
                            Note = "Can you provide an update on the project status?",
                            ProjectId = 1
                        },
                        new
                        {
                            ProjectCoordinatorId = 2,
                            AssignDate = new NodaTime.LocalDate(2025, 8, 24),
                            CoordinatorId = "43e63068-a5fd-4a45-acfb-0383ff4d45ea",
                            CoordinatorType = 1,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            IsActive = true,
                            Note = "Can you give support on the project?",
                            ProjectId = 1
                        },
                        new
                        {
                            ProjectCoordinatorId = 3,
                            AssignDate = new NodaTime.LocalDate(2025, 8, 24),
                            CoordinatorId = "6c35c5ad-2f70-4c3f-aa44-c94bc61d10a1",
                            CoordinatorType = 0,
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            IsActive = true,
                            Note = "Can you give support on the project?",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("PSMModel.Models.ProjectInspection", b =>
                {
                    b.Property<int>("ProjectInspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectInspectionId"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("InspectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ProjectCoordinatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendations")
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ProjectInspectionId");

                    b.HasIndex("ProjectCoordinatorId");

                    b.ToTable("ProjectInspections");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectProgress", b =>
                {
                    b.Property<int>("ProjectProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectProgressId"));

                    b.Property<LocalDate?>("ApprovedAt")
                        .HasColumnType("date");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedNote")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<LocalDate>("ProgressDate")
                        .HasColumnType("date");

                    b.Property<double>("ProgressPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectProgressApprovedStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ProjectProgressId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProgresses");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectTag", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.HasKey("ProjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("PSMModel.Models.Region", b =>
                {
                    b.Property<string>("RegionNo")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("RegionNo");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionNo = "R001",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Name = "Weliveriya South",
                            Note = "This is a region in Gampaha district."
                        },
                        new
                        {
                            RegionNo = "R002",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Name = "Weliveriya North",
                            Note = "This is a region in Gampaha district."
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RideId"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Driver")
                        .HasColumnType("integer");

                    b.Property<int>("DriverNo")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("RegionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("VehicalNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RideId");

                    b.HasIndex("RegionNo");

                    b.HasIndex("VehicalNo");

                    b.ToTable("Rides");

                    b.HasData(
                        new
                        {
                            RideId = 1,
                            CreatedAt = new NodaTime.LocalDateTime(2025, 7, 10, 12, 0),
                            CreatedBy = "1",
                            Driver = 0,
                            DriverNo = 1,
                            IsActive = true,
                            RegionNo = "R001",
                            StartTime = new NodaTime.LocalDateTime(2025, 7, 10, 13, 0),
                            Type = "Paper Collection",
                            VehicalNo = "T01"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.RidePoint", b =>
                {
                    b.Property<int>("RidePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RidePointId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<LocalDateTime>("PointTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RideId")
                        .HasColumnType("integer");

                    b.HasKey("RidePointId");

                    b.HasIndex("RideId");

                    b.ToTable("RidePoints");
                });

            modelBuilder.Entity("PSMModel.Models.Route", b =>
                {
                    b.Property<string>("RouteNo")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("RouteNo");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteNo = "R001",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            Distance = 0f,
                            IsActive = true,
                            Name = "Noth Root"
                        },
                        new
                        {
                            RouteNo = "R002",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            Distance = 0f,
                            IsActive = true,
                            Name = "South Root"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.RoutePoint", b =>
                {
                    b.Property<int>("RoutePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoutePointId"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PointName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("RoutePointId");

                    b.HasIndex("RouteNo");

                    b.ToTable("RoutePoints");

                    b.HasData(
                        new
                        {
                            RoutePointId = 1,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.026488999999998,
                            Longitude = 7.0249980000000001,
                            PointName = "maduma bankara vidyalaya",
                            RouteNo = "R001"
                        },
                        new
                        {
                            RoutePointId = 2,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.022924000000003,
                            Longitude = 7.0254649999999996,
                            PointName = "gala gawa",
                            RouteNo = "R001"
                        },
                        new
                        {
                            RoutePointId = 3,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.021614,
                            Longitude = 7.0225910000000002,
                            PointName = "Sewa Piyasa",
                            RouteNo = "R001"
                        },
                        new
                        {
                            RoutePointId = 4,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.023321999999993,
                            Longitude = 7.0228789999999996,
                            PointName = "jayamal oil",
                            RouteNo = "R001"
                        },
                        new
                        {
                            RoutePointId = 5,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.026511999999997,
                            Longitude = 7.0212519999999996,
                            PointName = "bathiya home",
                            RouteNo = "R001"
                        },
                        new
                        {
                            RoutePointId = 6,
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Latitude = 80.026774000000003,
                            Longitude = 7.0229679999999997,
                            PointName = "grace health",
                            RouteNo = "R001"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Color = "#FF4444",
                            Description = "High priority items",
                            IsActive = true,
                            Name = "Urgent"
                        },
                        new
                        {
                            TagId = 2,
                            Color = "#FF8800",
                            Description = "Bug related issues",
                            IsActive = true,
                            Name = "Bug"
                        },
                        new
                        {
                            TagId = 3,
                            Color = "#00AA00",
                            Description = "Feature improvements",
                            IsActive = true,
                            Name = "Enhancement"
                        },
                        new
                        {
                            TagId = 4,
                            Color = "#0088FF",
                            Description = "Routine maintenance tasks",
                            IsActive = true,
                            Name = "Maintenance"
                        },
                        new
                        {
                            TagId = 5,
                            Color = "#8800FF",
                            Description = "Documentation related",
                            IsActive = true,
                            Name = "Documentation"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenderId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ContractorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TenderDocument")
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TenderId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tenders");

                    b.HasData(
                        new
                        {
                            TenderId = 1,
                            BidAmount = 500000m,
                            ContractorId = "d0eca5fa-8cf4-4256-ab6a-9405c789c1b1",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 10, 1, 9, 0),
                            CreatedBy = "43e63068-a5fd-4a45-acfb-0383ff4d45ea",
                            IsActive = true,
                            Note = "This is a tender for Project A",
                            ProjectId = 1,
                            Subject = "Tender for Project A",
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        },
                        new
                        {
                            TenderId = 2,
                            BidAmount = 300000m,
                            ContractorId = "d0eca5fa-8cf4-4256-ab6a-9405c789c1b1",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 10, 1, 9, 0),
                            CreatedBy = "43e63068-a5fd-4a45-acfb-0383ff4d45ea",
                            IsActive = true,
                            Note = "This is a tender for Project A",
                            ProjectId = 1,
                            Subject = "Tender for Road Construction",
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        },
                        new
                        {
                            TenderId = 3,
                            BidAmount = 300000m,
                            ContractorId = "a4aa5b28-36ab-4991-975a-5e5e441bf6fa",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 10, 1, 9, 0),
                            CreatedBy = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            IsActive = true,
                            Note = "This is a tender for Project 2",
                            ProjectId = 2,
                            Subject = "Tender for Project Building",
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        },
                        new
                        {
                            TenderId = 4,
                            BidAmount = 400000m,
                            ContractorId = "a4aa5b28-36ab-4991-975a-5e5e441bf6fa",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 10, 1, 9, 0),
                            CreatedBy = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            IsActive = true,
                            Note = "This is a tender for Project 2",
                            ProjectId = 2,
                            Subject = "Tender for Road Building",
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketId"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<LocalDate?>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Estimation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasDiscriminator<string>("TicketType").HasValue("Ticket");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            Estimation = 0,
                            IsActive = true,
                            Status = 0,
                            Subject = "Fix Light Post LP001",
                            UserId = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a"
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            Estimation = 0,
                            IsActive = true,
                            Status = 0,
                            Subject = "Fix Light Post LP001 2",
                            UserId = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a"
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            Estimation = 0,
                            IsActive = true,
                            Status = 0,
                            Subject = "Fix Light Post LP001 3",
                            UserId = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a"
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "43e63068-a5fd-4a45-acfb-0383ff4d45ea",
                            Estimation = 0,
                            IsActive = true,
                            Status = 0,
                            Subject = "Fix Light Post LP001 4",
                            UserId = "43e63068-a5fd-4a45-acfb-0383ff4d45ea"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.TicketActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int?>("Transition")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketActivities");
                });

            modelBuilder.Entity("PSMModel.Models.TicketComplain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplainId")
                        .HasColumnType("integer");

                    b.Property<int?>("ComplainTicketTicketId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplainId");

                    b.HasIndex("ComplainTicketTicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketComplains");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComplainId = 2,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComplainId = 3,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComplainId = 4,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            ComplainId = 5,
                            TicketId = 4
                        });
                });

            modelBuilder.Entity("PSMModel.Models.TicketHistory", b =>
                {
                    b.Property<int>("TicketHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketHistoryId"));

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("TicketHistoryId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistories");
                });

            modelBuilder.Entity("PSMModel.Models.TicketTag", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.HasKey("TicketId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TicketTags");
                });

            modelBuilder.Entity("PSMModel.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<int?>("AuthType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Council")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Designation")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = "0c895075-b8e6-48f9-bb9e-2c9db9d7207a",
                            City = "Colombo",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Email = "ajith@example.com",
                            FirstName = "Ajith",
                            IsActive = true,
                            LastName = "User",
                            Mobile = "0777582696"
                        },
                        new
                        {
                            UserId = "43e63068-a5fd-4a45-acfb-0383ff4d45ea",
                            City = "Galle",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Email = "kumara@example.com",
                            FirstName = "Kumara",
                            IsActive = true,
                            LastName = "Perera",
                            Mobile = "0147894562"
                        },
                        new
                        {
                            UserId = "6c35c5ad-2f70-4c3f-aa44-c94bc61d10a1",
                            City = "Kandy",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Email = "upul@example.com",
                            FirstName = "Upul",
                            IsActive = true,
                            LastName = "Fernando",
                            Mobile = "0117654321"
                        },
                        new
                        {
                            UserId = "d0eca5fa-8cf4-4256-ab6a-9405c789c1b1",
                            City = "Kandy",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Email = "kamal@example.com",
                            FirstName = "kamal",
                            IsActive = true,
                            LastName = "Fernando",
                            Mobile = "0117654321"
                        },
                        new
                        {
                            UserId = "a4aa5b28-36ab-4991-975a-5e5e441bf6fa",
                            City = "Kandy",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Email = "kamal@example.com",
                            FirstName = "constractor2",
                            IsActive = true,
                            LastName = "Fernando",
                            Mobile = "0117654321"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Vehical", b =>
                {
                    b.Property<string>("VehicalNo")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicalNo");

                    b.ToTable("Vehicals");

                    b.HasData(
                        new
                        {
                            VehicalNo = "T01",
                            Brand = "John Dear",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Model = "T66",
                            RegistrationNo = "GA1234",
                            Year = "1998"
                        },
                        new
                        {
                            VehicalNo = "T02",
                            Brand = "Toyota",
                            CreatedAt = new NodaTime.LocalDateTime(2023, 1, 1, 9, 0),
                            CreatedBy = "1",
                            IsActive = true,
                            Model = "Truch",
                            RegistrationNo = "CAG3456",
                            Year = "2024"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GarbageComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.Complain");

                    b.Property<string>("GarbagePointNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("GarbageComplain");
                });

            modelBuilder.Entity("PSMModel.Models.GeneralComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.Complain");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("GeneralComplain");

                    b.HasData(
                        new
                        {
                            ComplainId = 1,
                            ClientId = "1",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            Detail = "General Complain 1 description",
                            IsActive = true,
                            MyProperty = 0,
                            Status = 0,
                            Subject = "General Complain 1",
                            IsPrivate = false
                        });
                });

            modelBuilder.Entity("PSMModel.Models.LightPostComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.Complain");

                    b.Property<string>("LightPostNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("LightPostNumber");

                    b.HasDiscriminator().HasValue("LightPostComplain");

                    b.HasData(
                        new
                        {
                            ComplainId = 2,
                            ClientId = "1",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            Detail = "Light post not working at Main St.",
                            IsActive = true,
                            MyProperty = 0,
                            Status = 0,
                            Subject = "Light Post Issue",
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            ComplainId = 3,
                            ClientId = "1",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            Detail = "Light post LP001 is not working 2",
                            IsActive = true,
                            MyProperty = 0,
                            Status = 0,
                            Subject = "Light Post Issue 2",
                            LightPostNumber = "LP001"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.ProjectComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.Complain");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasIndex("ProjectId");

                    b.HasDiscriminator().HasValue("ProjectComplain");

                    b.HasData(
                        new
                        {
                            ComplainId = 4,
                            ClientId = "1",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            Detail = "Project Complain 1 description",
                            IsActive = true,
                            MyProperty = 0,
                            Status = 0,
                            Subject = "Project Complain 1",
                            ProjectId = 1
                        },
                        new
                        {
                            ComplainId = 5,
                            ClientId = "2",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 20, 10, 0),
                            CreatedBy = "2",
                            Detail = "Project Complain 2 description",
                            IsActive = true,
                            MyProperty = 0,
                            Status = 2,
                            Subject = "Project Complain 2",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("PSMModel.Models.ComplainTicket", b =>
                {
                    b.HasBaseType("PSMModel.Models.Ticket");

                    b.Property<int?>("ComplainType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ComplainTicket");
                });

            modelBuilder.Entity("PSMModel.Models.InternalTicket", b =>
                {
                    b.HasBaseType("PSMModel.Models.Ticket");

                    b.HasDiscriminator().HasValue("InternalTicket");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectTicket", b =>
                {
                    b.HasBaseType("PSMModel.Models.Ticket");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasIndex("ProjectId");

                    b.HasDiscriminator().HasValue("ProjectTicket");
                });

            modelBuilder.Entity("PSMModel.Models.Driver", b =>
                {
                    b.HasBaseType("PSMModel.Models.User");

                    b.Property<LocalDateTime?>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            UserId = "4",
                            City = "Colombo",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            FirstName = "Upul",
                            IsActive = true,
                            LastName = "Perera",
                            Mobile = "0777582365",
                            ExpireDate = new NodaTime.LocalDateTime(2027, 6, 19, 14, 14),
                            LicenseNo = "2345"
                        },
                        new
                        {
                            UserId = "5",
                            City = "Galle",
                            Council = "Mahara",
                            CreatedAt = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            CreatedBy = "1",
                            FirstName = "Shantha",
                            IsActive = true,
                            LastName = "Fernando",
                            Mobile = "0147894492",
                            ExpireDate = new NodaTime.LocalDateTime(2028, 6, 19, 14, 14),
                            LicenseNo = "2345"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Attachment", b =>
                {
                    b.HasOne("PSMModel.Models.Complain", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ComplainId");

                    b.HasOne("PSMModel.Models.Project", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectId");

                    b.HasOne("PSMModel.Models.Ticket", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSMModel.Models.Complain", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PSMModel.Models.ComplainTag", b =>
                {
                    b.HasOne("PSMModel.Models.Complain", "Complain")
                        .WithMany("ComplainTags")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Tag", "Tag")
                        .WithMany("ComplainTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complain");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PSMModel.Models.GCShedule", b =>
                {
                    b.HasOne("PSMModel.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PSMModel.Models.Notification", b =>
                {
                    b.HasOne("PSMModel.Models.Complain", "Complain")
                        .WithMany()
                        .HasForeignKey("ComplainId");

                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Complain");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectCoordinator", b =>
                {
                    b.HasOne("PSMModel.Models.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordinator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectInspection", b =>
                {
                    b.HasOne("PSMModel.Models.ProjectCoordinator", "ProjectCoordinator")
                        .WithMany()
                        .HasForeignKey("ProjectCoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectCoordinator");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectProgress", b =>
                {
                    b.HasOne("PSMModel.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectTag", b =>
                {
                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Tag", "Tag")
                        .WithMany("ProjectTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.HasOne("PSMModel.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Vehical", "Vehical")
                        .WithMany()
                        .HasForeignKey("VehicalNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Vehical");
                });

            modelBuilder.Entity("PSMModel.Models.RidePoint", b =>
                {
                    b.HasOne("PSMModel.Models.Ride", "Ride")
                        .WithMany("RidePoints")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("PSMModel.Models.RoutePoint", b =>
                {
                    b.HasOne("PSMModel.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("PSMModel.Models.Tender", b =>
                {
                    b.HasOne("PSMModel.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSMModel.Models.TicketActivity", b =>
                {
                    b.HasOne("PSMModel.Models.Ticket", null)
                        .WithMany("Activities")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSMModel.Models.TicketComplain", b =>
                {
                    b.HasOne("PSMModel.Models.Complain", "Complain")
                        .WithMany("TicketComplains")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.ComplainTicket", null)
                        .WithMany("TicketComplains")
                        .HasForeignKey("ComplainTicketTicketId");

                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complain");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PSMModel.Models.TicketHistory", b =>
                {
                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PSMModel.Models.TicketTag", b =>
                {
                    b.HasOne("PSMModel.Models.Tag", "Tag")
                        .WithMany("TicketTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany("TicketTags")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PSMModel.Models.LightPostComplain", b =>
                {
                    b.HasOne("PSMModel.Models.LightPost", "LightPost")
                        .WithMany()
                        .HasForeignKey("LightPostNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LightPost");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectComplain", b =>
                {
                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany("ProjectComplains")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.ProjectTicket", b =>
                {
                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.Complain", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ComplainTags");

                    b.Navigation("TicketComplains");
                });

            modelBuilder.Entity("PSMModel.Models.Project", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ProjectComplains");

                    b.Navigation("ProjectTags");
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.Navigation("RidePoints");
                });

            modelBuilder.Entity("PSMModel.Models.Tag", b =>
                {
                    b.Navigation("ComplainTags");

                    b.Navigation("ProjectTags");

                    b.Navigation("TicketTags");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attachments");

                    b.Navigation("TicketTags");
                });

            modelBuilder.Entity("PSMModel.Models.ComplainTicket", b =>
                {
                    b.Navigation("TicketComplains");
                });
#pragma warning restore 612, 618
        }
    }
}
