// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSMDataAccess;

#nullable disable

namespace PSMDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717131543_projectdatev2")]
    partial class projectdatev2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSMModel.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Mobile = "0714789562",
                            Name = "Jeewan"
                        },
                        new
                        {
                            ClientId = 2,
                            Mobile = "07777894562",
                            Name = "Lakshitha"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkpackageId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkpackageId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PSMModel.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Colombo",
                            Name = "Maga"
                        },
                        new
                        {
                            Id = 2,
                            Address = "123 Main St, Gampaha",
                            Name = "Access Construction"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GCShedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionNo");

                    b.ToTable("GCShedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = "Monday",
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Platic"
                        },
                        new
                        {
                            Id = 2,
                            Day = "Tuesday",
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 3,
                            Day = "Wednesday",
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 4,
                            Day = "Thursday",
                            RegionNo = "R001",
                            Time = "Afternoon",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 5,
                            Day = "Friday",
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Paper"
                        },
                        new
                        {
                            Id = 6,
                            Day = "Monday",
                            RegionNo = "R001",
                            Time = "Morning",
                            Type = "Platic"
                        },
                        new
                        {
                            Id = 7,
                            Day = "Tuesday",
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 8,
                            Day = "Wednesday",
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 9,
                            Day = "Thursday",
                            RegionNo = "R002",
                            Time = "Afternoon",
                            Type = "Garbage"
                        },
                        new
                        {
                            Id = 10,
                            Day = "Friday",
                            RegionNo = "R002",
                            Time = "Morning",
                            Type = "Paper"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.LightPost", b =>
                {
                    b.Property<string>("LightPostNumber")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("LightPostNumber");

                    b.ToTable("LightPosts");

                    b.HasData(
                        new
                        {
                            LightPostNumber = "LP001",
                            Latitude = 6.9271000000000003,
                            Longitude = 79.861199999999997
                        },
                        new
                        {
                            LightPostNumber = "LP002",
                            Latitude = 6.9272,
                            Longitude = 79.8613
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwadedTenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDate?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("LocationNote")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecificationDocument")
                        .HasColumnType("text");

                    b.Property<LocalDate?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDate?>("TenderClosingDate")
                        .HasColumnType("date");

                    b.Property<LocalDate?>("TenderOpeningDate")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AwadedTenderId")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwadedTenderId = 1,
                            Description = "Description for Project Alpha",
                            EndDate = new NodaTime.LocalDate(2023, 12, 31),
                            EstimatedCost = 1000000m,
                            Latitude = 34.052199999999999,
                            Location = "Location A",
                            LocationNote = "Note for Location A",
                            Longitude = -118.2437,
                            Name = "Project Alpha",
                            SpecificationDocument = "specification_alpha.pdf",
                            StartDate = new NodaTime.LocalDate(2023, 1, 1),
                            Status = "Proposed",
                            TenderClosingDate = new NodaTime.LocalDate(2023, 1, 30),
                            TenderOpeningDate = new NodaTime.LocalDate(2023, 1, 15),
                            Type = "Construction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Weliveriya road project",
                            EndDate = new NodaTime.LocalDate(2023, 12, 31),
                            EstimatedCost = 1000000m,
                            Latitude = 34.052199999999999,
                            Location = "Location A",
                            LocationNote = "Note for Location A",
                            Longitude = -118.2437,
                            Name = "Weliveriya road project",
                            SpecificationDocument = "specification_alpha.pdf",
                            StartDate = new NodaTime.LocalDate(2023, 1, 1),
                            Status = "Proposed",
                            TenderClosingDate = new NodaTime.LocalDate(2023, 1, 30),
                            TenderOpeningDate = new NodaTime.LocalDate(2023, 1, 15),
                            Type = "Road Construction"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Region", b =>
                {
                    b.Property<string>("RegionNo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionNo");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionNo = "R001",
                            Name = "Weliveriya South",
                            Note = "This is a region in Gampaha district."
                        },
                        new
                        {
                            RegionNo = "R002",
                            Name = "Weliveriya North",
                            Note = "This is a region in Gampaha district."
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Driver")
                        .HasColumnType("integer");

                    b.Property<int>("DriverNo")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("RegionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicalNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionNo");

                    b.HasIndex("VehicalNo");

                    b.ToTable("Rides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Driver = 0,
                            DriverNo = 1,
                            RegionNo = "R001",
                            StartTime = new NodaTime.LocalDateTime(2025, 7, 10, 13, 0),
                            Type = "Paper Collection",
                            VehicalNo = "T01"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.RidePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<LocalDateTime>("PointTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RideId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("RidePoints");
                });

            modelBuilder.Entity("PSMModel.Models.Route", b =>
                {
                    b.Property<string>("RouteNo")
                        .HasColumnType("text");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RouteNo");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteNo = "R001",
                            Distance = 0f,
                            Name = "Noth Root"
                        },
                        new
                        {
                            RouteNo = "R002",
                            Distance = 0f,
                            Name = "South Root"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.RoutePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RouteNo");

                    b.ToTable("RoutePoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 80.026488999999998,
                            Longitude = 7.0249980000000001,
                            Name = "maduma bankara vidyalaya",
                            RouteNo = "R001"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 80.022924000000003,
                            Longitude = 7.0254649999999996,
                            Name = "gala gawa",
                            RouteNo = "R001"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 80.021614,
                            Longitude = 7.0225910000000002,
                            Name = "Sewa Piyasa",
                            RouteNo = "R001"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 80.023321999999993,
                            Longitude = 7.0228789999999996,
                            Name = "jayamal oil",
                            RouteNo = "R001"
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 80.026511999999997,
                            Longitude = 7.0212519999999996,
                            Name = "bathiya home",
                            RouteNo = "R001"
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 80.026774000000003,
                            Longitude = 7.0229679999999997,
                            Name = "grace health",
                            RouteNo = "R001"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BidAmount = 500000m,
                            CompanyId = 1,
                            Name = "Tender for Project A",
                            Note = "This is a tender for Project A",
                            ProjectId = 1,
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        },
                        new
                        {
                            Id = 2,
                            BidAmount = 300000m,
                            CompanyId = 1,
                            Name = "Tender for Road Construction",
                            Note = "This is a tender for Project A",
                            ProjectId = 1,
                            SubmittedDate = new NodaTime.LocalDateTime(2023, 10, 1, 10, 0)
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketId"));

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001",
                            UserId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 2",
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 3",
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 4",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PSMModel.Models.TicketPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkPackageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("WorkPackageId");

                    b.ToTable("TicketPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TicketId = 1,
                            WorkPackageId = 2
                        },
                        new
                        {
                            Id = 2,
                            TicketId = 1,
                            WorkPackageId = 3
                        },
                        new
                        {
                            Id = 3,
                            TicketId = 3,
                            WorkPackageId = 4
                        },
                        new
                        {
                            Id = 4,
                            TicketId = 4,
                            WorkPackageId = 5
                        });
                });

            modelBuilder.Entity("PSMModel.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Admin",
                            TelNumber = "0777582696"
                        },
                        new
                        {
                            UserId = 2,
                            Name = "Kamal",
                            TelNumber = "0147894562"
                        },
                        new
                        {
                            UserId = 3,
                            Name = "Kumara",
                            TelNumber = "0117654321"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Vehical", b =>
                {
                    b.Property<string>("VehicalNo")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicalNo");

                    b.ToTable("Vehicals");

                    b.HasData(
                        new
                        {
                            VehicalNo = "T01",
                            Brand = "John Dear",
                            Model = "T66",
                            RegistrationNo = "GA1234",
                            Year = "1998"
                        },
                        new
                        {
                            VehicalNo = "T02",
                            Brand = "Toyota",
                            Model = "Truch",
                            RegistrationNo = "CAG3456",
                            Year = "2024"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.Property<int>("WorkPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkPackageId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkPackageType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("WorkPackageId");

                    b.HasIndex("ClientId");

                    b.ToTable("WorkPackages");

                    b.HasDiscriminator<string>("WorkPackageType").HasValue("WorkPackage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            WorkPackageId = 1,
                            ClientId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Garbage collection needed in area LP002",
                            Name = "Garbage Collection",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14)
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Driver", b =>
                {
                    b.HasBaseType("PSMModel.Models.User");

                    b.Property<LocalDateTime?>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenNo")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            Name = "Upul",
                            TelNumber = "0777582365",
                            ExpireDate = new NodaTime.LocalDateTime(2027, 6, 19, 14, 14),
                            LicenNo = "2345"
                        },
                        new
                        {
                            UserId = 5,
                            Name = "Shantha",
                            TelNumber = "0147894492",
                            ExpireDate = new NodaTime.LocalDateTime(2028, 6, 19, 14, 14),
                            LicenNo = "2345"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GarbageComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<string>("GarbagePointNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("GarbageComplain");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 7,
                            ClientId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Garbage collection needed in area",
                            Name = "Garbage Collection",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            GarbagePointNo = "GP001"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GeneralComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("GeneralComplain");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 12,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "General Complain 1 description",
                            Name = "General Complain 1",
                            Status = "New",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            IsPrivate = false
                        });
                });

            modelBuilder.Entity("PSMModel.Models.LightPostComplint", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<string>("LightPostNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LightPostComplint");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 2,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Light post LP001 is not working",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 3,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Light post LP001 is not working 2",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 4,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 3",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 5,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 4",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP002"
                        },
                        new
                        {
                            WorkPackageId = 6,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 5",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP002"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("PSMModel.Models.WorkPackage", "WorkPackage")
                        .WithMany("Comments")
                        .HasForeignKey("WorkpackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("PSMModel.Models.GCShedule", b =>
                {
                    b.HasOne("PSMModel.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PSMModel.Models.Project", b =>
                {
                    b.HasOne("PSMModel.Models.Tender", "Tender")
                        .WithOne()
                        .HasForeignKey("PSMModel.Models.Project", "AwadedTenderId");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.HasOne("PSMModel.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Vehical", "Vehical")
                        .WithMany()
                        .HasForeignKey("VehicalNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Vehical");
                });

            modelBuilder.Entity("PSMModel.Models.RidePoint", b =>
                {
                    b.HasOne("PSMModel.Models.Ride", "Ride")
                        .WithMany("RidePoints")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("PSMModel.Models.RoutePoint", b =>
                {
                    b.HasOne("PSMModel.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("PSMModel.Models.Tender", b =>
                {
                    b.HasOne("PSMModel.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSMModel.Models.TicketPackage", b =>
                {
                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany("TicketPackages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.WorkPackage", "WorkPackage")
                        .WithMany("TicketPackages")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PSMModel.Models.Ride", b =>
                {
                    b.Navigation("RidePoints");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Navigation("TicketPackages");
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TicketPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
