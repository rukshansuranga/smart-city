// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSMDataAccess;

#nullable disable

namespace PSMDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250710042310_modelvehical")]
    partial class modelvehical
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSMModel.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Mobile = "0714789562",
                            Name = "Jeewan"
                        },
                        new
                        {
                            ClientId = 2,
                            Mobile = "07777894562",
                            Name = "Lakshitha"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkpackageId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkpackageId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PSMModel.Models.LightPost", b =>
                {
                    b.Property<string>("LightPostNumber")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("LightPostNumber");

                    b.ToTable("LightPosts");

                    b.HasData(
                        new
                        {
                            LightPostNumber = "LP001",
                            Latitude = 6.9271000000000003,
                            Longitude = 79.861199999999997
                        },
                        new
                        {
                            LightPostNumber = "LP002",
                            Latitude = 6.9272,
                            Longitude = 79.8613
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketId"));

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001",
                            UserId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 2",
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 3",
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Title = "Fix Light Post LP001 4",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PSMModel.Models.TicketPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkPackageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("WorkPackageId");

                    b.ToTable("TicketPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TicketId = 1,
                            WorkPackageId = 2
                        },
                        new
                        {
                            Id = 2,
                            TicketId = 1,
                            WorkPackageId = 3
                        },
                        new
                        {
                            Id = 3,
                            TicketId = 3,
                            WorkPackageId = 4
                        },
                        new
                        {
                            Id = 4,
                            TicketId = 4,
                            WorkPackageId = 5
                        });
                });

            modelBuilder.Entity("PSMModel.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PSMModel.Models.Vehical", b =>
                {
                    b.Property<string>("VehicalNo")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicalNo");

                    b.ToTable("Vehicals");
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.Property<int>("WorkPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkPackageId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkPackageType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("WorkPackageId");

                    b.HasIndex("ClientId");

                    b.ToTable("WorkPackages");

                    b.HasDiscriminator<string>("WorkPackageType").HasValue("WorkPackage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            WorkPackageId = 1,
                            ClientId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Garbage collection needed in area LP002",
                            Name = "Garbage Collection",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14)
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Driver", b =>
                {
                    b.HasBaseType("PSMModel.Models.User");

                    b.Property<LocalDateTime?>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenNo")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("PSMModel.Models.GarbageComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<string>("GarbagePointNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("GarbageComplain");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 7,
                            ClientId = 2,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Garbage collection needed in area",
                            Name = "Garbage Collection",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            GarbagePointNo = "GP001"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.GeneralComplain", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("GeneralComplain");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 12,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "General Complain 1 description",
                            Name = "General Complain 1",
                            Status = "New",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            IsPrivate = false
                        });
                });

            modelBuilder.Entity("PSMModel.Models.LightPostComplint", b =>
                {
                    b.HasBaseType("PSMModel.Models.WorkPackage");

                    b.Property<string>("LightPostNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LightPostComplint");

                    b.HasData(
                        new
                        {
                            WorkPackageId = 2,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Light post LP001 is not working",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 3,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            Detail = "Light post LP001 is not working 2",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 19, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 4,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 3",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP001"
                        },
                        new
                        {
                            WorkPackageId = 5,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 4",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP002"
                        },
                        new
                        {
                            WorkPackageId = 6,
                            ClientId = 1,
                            CreatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            Detail = "Light post LP001 is not working 5",
                            Name = "lightisnotworking",
                            Status = "Open",
                            UpdatedDate = new NodaTime.LocalDateTime(2025, 6, 20, 14, 14),
                            LightPostNumber = "LP002"
                        });
                });

            modelBuilder.Entity("PSMModel.Models.Comment", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("PSMModel.Models.WorkPackage", "WorkPackage")
                        .WithMany("Comments")
                        .HasForeignKey("WorkpackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.HasOne("PSMModel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSMModel.Models.TicketPackage", b =>
                {
                    b.HasOne("PSMModel.Models.Ticket", "Ticket")
                        .WithMany("TicketPackages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSMModel.Models.WorkPackage", "WorkPackage")
                        .WithMany("TicketPackages")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.HasOne("PSMModel.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PSMModel.Models.Ticket", b =>
                {
                    b.Navigation("TicketPackages");
                });

            modelBuilder.Entity("PSMModel.Models.WorkPackage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TicketPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
